{"version":3,"sources":["AppHeader.js","ParameterContainer.js","ElectionParameters.js","LuceModelParameters.js","ModelParameters.js","EmptyDataPlaceholder.js","SimulationResults.js","AboutPage.js","routes.js","SimulationPage.js","App.js","serviceWorker.js","index.js"],"names":["AppHeader","props","Navbar","bg","variant","expand","Container","fluid","Brand","Toggle","Collapse","className","Nav","routes","map","route","i","Item","Link","as","to","path","key","href","display","ParameterContainer","Card","body","children","ElectionParameters","type","onChange","e","setSeatsOpen","target","value","seatsOpen","LuceModelParameters","ModelParameters","Tabs","defaultActiveKey","Tab","eventKey","title","disabled","EmptyDataPlaceholder","SimulationResults","fetchData","a","axios","get","process","params","queryParams","response","setSimulationResults","data","_","isEmpty","simulationResults","JSON","stringify","Button","onClick","AboutPage","component","useState","Row","style","height","Col","md","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.32a804be.chunk.js","sourcesContent":["import React from \"react\";\nimport { Link } from \"react-router-dom\";\nimport { Container, Navbar, Nav } from \"react-bootstrap\";\n\nfunction AppHeader(props) {\n  return (\n    <Navbar bg=\"dark\" variant=\"dark\" expand=\"lg\">\n      <Container fluid>\n        <Navbar.Brand>\n          Modeling Representation with Ranked Choice Voting\n        </Navbar.Brand>\n        <Navbar.Toggle />\n        <Navbar.Collapse className=\"justify-content-end\">\n          <Nav className=\"justify-content-end\">\n            {props.routes.map((route, i) => (\n              <Nav.Item className=\"text-right\">\n                <Nav.Link as={Link} to={route.path} key={i} href={route.path}>\n                  {route.display}\n                </Nav.Link>\n              </Nav.Item>\n            ))}\n          </Nav>\n        </Navbar.Collapse>\n      </Container>\n    </Navbar>\n  );\n}\n\nexport default AppHeader;\n","import React from \"react\";\nimport { Card } from \"react-bootstrap\";\n\nfunction ParameterContainer(props) {\n  return (\n    <Card body className=\"flex-grow-1\">\n      {props.children}\n    </Card>\n  );\n}\n\nexport default ParameterContainer;\n","import React from \"react\";\nimport ParameterContainer from \"./ParameterContainer\";\n\nfunction ElectionParameters(props) {\n  return (\n    <>\n      <h1>Election Parameters</h1>\n      <ParameterContainer>\n        <label className=\"input-label\">Candidate Seats</label>\n        <input\n          type=\"number\"\n          onChange={(e) => props.setSeatsOpen(e.target.value)}\n          value={props.seatsOpen}\n        ></input>\n        <p className=\"input-helper-text\">Max 30</p>\n      </ParameterContainer>\n    </>\n  );\n}\n\nexport default ElectionParameters;\n","import React from \"react\";\n\nfunction LuceModelParameters() {\n  return <div>Luce Model Parameters go here</div>;\n}\n\nexport default LuceModelParameters;\n","import React from \"react\";\nimport { Tab, Tabs } from \"react-bootstrap\";\nimport LuceModelParameters from \"./LuceModelParameters\";\nimport ParameterContainer from \"./ParameterContainer\";\n\nfunction ModelParameters() {\n  return (\n    <>\n      <h1>Model Parameters</h1>\n      <ParameterContainer>\n        <Tabs defaultActiveKey=\"luce\">\n          <Tab eventKey=\"luce\" title=\"Luce\">\n            <LuceModelParameters />\n          </Tab>\n          <Tab eventKey=\"bradleyTerry\" title=\"Bradley-Terry\" disabled>\n            <LuceModelParameters />\n          </Tab>\n          <Tab\n            eventKey=\"alternatingCrossover\"\n            title=\"Alternating-Crossover\"\n            disabled\n          >\n            <LuceModelParameters />\n          </Tab>\n          <Tab eventKey=\"cambridgeSampler\" title=\"Cambridge Sampler\" disabled>\n            <LuceModelParameters />\n          </Tab>\n        </Tabs>\n      </ParameterContainer>\n    </>\n  );\n}\n\nexport default ModelParameters;\n","import React from \"react\";\n\nfunction EmptyDataPlaceholder() {\n  return <p>No simultion data available</p>;\n}\n\nexport default EmptyDataPlaceholder;\n","import React from \"react\";\nimport axios from \"axios\";\nimport _ from \"lodash\";\nimport { Button } from \"react-bootstrap\";\nimport ParameterContainer from \"./ParameterContainer\";\nimport EmptyDataPlaceholder from \"./EmptyDataPlaceholder\";\n\nfunction SimulationResults(props) {\n  const apiURL =\n    process.env.REACT_APP_API_BASEURL + process.env.REACT_APP_API_SLUG;\n  const fetchData = async () => {\n    const response = await axios.get(apiURL, { params: props.queryParams });\n    props.setSimulationResults(response.data);\n  };\n\n  return (\n    <>\n      <h1>Simultation Results</h1>\n      <ParameterContainer>\n        {_.isEmpty(props.simulationResults) && <EmptyDataPlaceholder />}\n        {!_.isEmpty(props.simulationResults) && (\n          <p>{JSON.stringify(props.simulationResults)}</p>\n        )}\n        <Button onClick={fetchData}>Run Simulation</Button>\n      </ParameterContainer>\n    </>\n  );\n}\n\nexport default SimulationResults;\n","import React from \"react\";\n\nfunction AboutPage() {\n  return (\n    <>\n      <h1>About Page</h1>\n      <p>this is where the about page would go, but is a placeholder for now</p>\n    </>\n  );\n}\n\nexport default AboutPage;\n","import SimulationPage from \"./SimulationPage\";\nimport AboutPage from \"./AboutPage\";\n\n// Config file serving as a single point of truth for all application routes\nconst routes = [\n  {\n    path: \"/\",\n    display: \"Home\",\n    component: SimulationPage,\n  },\n  {\n    path: \"/about\",\n    display: \"About\",\n    component: AboutPage,\n  },\n];\n\nexport { routes };\n","import React, { useState } from \"react\";\nimport { Container, Row, Col } from \"react-bootstrap\";\nimport ElectionParameters from \"./ElectionParameters\";\nimport ModelParameters from \"./ModelParameters\";\nimport SimulationResults from \"./SimulationResults\";\n\nfunction SimulationPage() {\n  const [seatsOpen, setSeatsOpen] = useState(0);\n  const [simulationResults, setSimulationResults] = useState({});\n\n  return (\n    <Container fluid>\n      <Row style={{ height: \"max\" }}>\n        <Col className=\"pt-2 d-flex flex-column\">\n          <ElectionParameters\n            seatsOpen={seatsOpen}\n            setSeatsOpen={setSeatsOpen}\n          />\n        </Col>\n        <Col className=\"pt-2 d-flex flex-column\">\n          <ModelParameters />\n        </Col>\n        <Col md={4} className=\"pt-2 d-flex flex-column\">\n          <SimulationResults\n            simulationResults={simulationResults}\n            queryParams={{ seatsOpen }}\n            setSimulationResults={setSimulationResults}\n          />\n        </Col>\n      </Row>\n    </Container>\n  );\n}\n\nexport default SimulationPage;\n","import React from \"react\";\nimport { BrowserRouter as Router, Switch, Route } from \"react-router-dom\";\nimport AppHeader from \"./AppHeader\";\nimport { routes } from \"./routes\";\nimport \"./App.css\";\n\nfunction App() {\n  return (\n    <Router>\n      <AppHeader routes={routes} />\n      <Switch>\n        {routes.map((route, i) => (\n          <Route path={route.path} key={i}>\n            <route.component />\n          </Route>\n        ))}\n      </Switch>\n    </Router>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === \"localhost\" ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === \"[::1]\" ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === \"production\" && \"serviceWorker\" in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener(\"load\", () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            \"This web app is being served cache-first by a service \" +\n              \"worker. To learn more, visit https://bit.ly/CRA-PWA\"\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === \"installed\") {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                \"New content is available and will be used when all \" +\n                  \"tabs for this page are closed. See https://bit.ly/CRA-PWA.\"\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log(\"Content is cached for offline use.\");\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error(\"Error during service worker registration:\", error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { \"Service-Worker\": \"script\" },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get(\"content-type\");\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf(\"javascript\") === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        \"No internet connection found. App is running in offline mode.\"\n      );\n    });\n}\n\nexport function unregister() {\n  if (\"serviceWorker\" in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"fontsource-open-sans\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport \"./index.css\";\n\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}