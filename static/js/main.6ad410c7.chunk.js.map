{"version":3,"sources":["AppHeader.js","NumberInput.js","ParameterContainer.js","Slider.js","ElectionParameters.js","EmptyDataPlaceholder.js","SimulationResults.js","SimulationPage.js","AboutPage.js","routes.js","App.js","serviceWorker.js","index.js"],"names":["AppHeader","props","Navbar","bg","variant","expand","Brand","className","Toggle","Collapse","Nav","routes","map","route","i","Item","key","display","Link","as","to","path","href","NumberInput","label","handleChange","value","name","helperText","step","type","onChange","ParameterContainer","Card","body","children","Slider","Form","Group","controlId","Label","Control","ElectionParameters","formData","setFormData","formParams","event","formDataCopy","target","param","id","console","warn","EmptyDataPlaceholder","SimulationResults","fetchData","a","axios","get","process","params","queryParams","response","setSimulationResults","data","_","isEmpty","simulationResults","JSON","stringify","Button","onClick","electionParams","initialValue","info","AboutPage","component","paramKeys","concat","p","initialState","forEach","useState","Container","fluid","Row","style","height","Col","xl","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.6ad410c7.chunk.js","sourcesContent":["import React from \"react\";\nimport { Link } from \"react-router-dom\";\nimport { Navbar, Nav } from \"react-bootstrap\";\n\nfunction AppHeader(props) {\n  return (\n    <Navbar bg=\"dark\" variant=\"dark\" expand=\"lg\">\n      <Navbar.Brand>\n        Modeling Representation <br className=\"d-xs-block d-sm-none\" /> with\n        Ranked Choice Voting\n      </Navbar.Brand>\n      <Navbar.Toggle />\n      <Navbar.Collapse className=\"justify-content-end\">\n        <Nav className=\"justify-content-end\">\n          {props.routes.map((route, i) => (\n            <Nav.Item className=\"text-right\" key={route.display}>\n              <Nav.Link as={Link} to={route.path} key={i} href={route.path}>\n                {route.display}\n              </Nav.Link>\n            </Nav.Item>\n          ))}\n        </Nav>\n      </Navbar.Collapse>\n    </Navbar>\n  );\n}\n\nexport default AppHeader;\n","import React from \"react\";\n\nfunction NumberInput({\n  label,\n  handleChange,\n  value,\n  name,\n  helperText,\n  step = 1,\n}) {\n  return (\n    <>\n      <label className=\"input-label\">{label}</label>\n      <input\n        name={name}\n        type=\"number\"\n        onChange={handleChange}\n        value={value}\n        step={step}\n      />\n      <p className=\"input-helper-text\">{helperText}</p>\n    </>\n  );\n}\n\nexport default NumberInput;\n","import React from \"react\";\nimport { Card } from \"react-bootstrap\";\n\nfunction ParameterContainer(props) {\n  return (\n    <Card body className=\"flex-grow-1\">\n      {props.children}\n    </Card>\n  );\n}\n\nexport default ParameterContainer;\n","import React from \"react\";\n\nimport { Form } from \"react-bootstrap\";\n\nfunction Slider() {\n  return (\n    <Form>\n      <Form.Group controlId=\"formBasicRange\">\n        <Form.Label>Range</Form.Label>\n        <Form.Control type=\"range\" />\n      </Form.Group>\n    </Form>\n  );\n}\n\nexport default Slider;\n","import React from \"react\";\nimport NumberInput from \"./NumberInput\";\nimport ParameterContainer from \"./ParameterContainer\";\nimport Slider from \"./Slider\";\n\nfunction ElectionParameters({ formData, setFormData, formParams }) {\n  const handleChange = (event) => {\n    const formDataCopy = { ...formData };\n    formDataCopy[event.target.name] = event.target.value;\n    setFormData(formDataCopy);\n  };\n\n  return (\n    <>\n      <h1>Election Parameters</h1>\n      <ParameterContainer>\n        {formParams.map((param) => {\n          switch (param.type) {\n            case \"number\":\n              return (\n                <NumberInput\n                  id={param.id}\n                  key={param.id}\n                  // Note: This is used to key onto the formData object, and is crucial for successfully updating the formData appropriately\n                  name={param.name}\n                  label={param.label}\n                  handleChange={handleChange}\n                  step={param.step}\n                  value={formData[param.name]}\n                  helperText={param.helperText}\n                />\n              );\n            case \"slider\":\n              return (\n                <Slider\n                  id={param.id}\n                  key={param.id}\n                  // Note: This is used to key onto the formData object, and is crucial for successfully updating the formData appropriately\n                  name={param.name}\n                  label={param.label}\n                  handleChange={handleChange}\n                  step={param.step}\n                  value={formData[param.name]}\n                  helperText={param.helperText}\n                />\n              );\n            default:\n              console.warn(\n                `Seeing a new kind of parameter type: ${param.type}`\n              );\n              return null;\n          }\n        })}\n      </ParameterContainer>\n    </>\n  );\n}\n\nexport default ElectionParameters;\n","import React from \"react\";\n\nfunction EmptyDataPlaceholder() {\n  return <p>No simultion data available</p>;\n}\n\nexport default EmptyDataPlaceholder;\n","import React from \"react\";\nimport axios from \"axios\";\nimport _ from \"lodash\";\nimport { Button } from \"react-bootstrap\";\nimport ParameterContainer from \"./ParameterContainer\";\nimport EmptyDataPlaceholder from \"./EmptyDataPlaceholder\";\n\nfunction SimulationResults(props) {\n  const apiURL =\n    process.env.REACT_APP_API_BASEURL + process.env.REACT_APP_API_SLUG;\n  const fetchData = async () => {\n    const response = await axios.get(apiURL, { params: props.queryParams });\n    props.setSimulationResults(response.data);\n  };\n\n  return (\n    <>\n      <h1>Simultation Results</h1>\n      <ParameterContainer>\n        {_.isEmpty(props.simulationResults) && <EmptyDataPlaceholder />}\n        {!_.isEmpty(props.simulationResults) && (\n          <p>{JSON.stringify(props.simulationResults)}</p>\n        )}\n        <Button onClick={fetchData}>Run Simulation</Button>\n      </ParameterContainer>\n    </>\n  );\n}\n\nexport default SimulationResults;\n","import React, { useState } from \"react\";\nimport { Container, Row, Col } from \"react-bootstrap\";\nimport ElectionParameters from \"./ElectionParameters\";\n// import ModelParameters from \"./ModelParameters\";\nimport SimulationResults from \"./SimulationResults\";\n\n// A common lookup table for Majority-Minority labels\n// const mmLabels = {\n//   maj: \"Green\",\n//   min: \"Purple\",\n// };\n\nconst electionParams = [\n  {\n    id: \"ballots\",\n    name: \"ballots\",\n    type: \"number\",\n    initialValue: 1000,\n    step: 10,\n    label: \"Voter Population\",\n    helperText: \"Max 10,000\",\n    info: \"The number of voters in each election simulation\",\n  },\n  {\n    id: \"seatsOpen\",\n    name: \"seatsOpen\",\n    type: \"number\",\n    initialValue: 10,\n    step: 1,\n    label: \"Spots Up For Election\",\n    helperText: \"Max 30\",\n    info: \"The number of open seats open for election in each simulation\",\n  },\n];\n\n// const modelParams = [\n//   {\n//     id: \"majorityMajorityAffinity\",\n//     name: \"majorityMajorityAffinity\",\n//     type: \"slider\",\n//     initialValue: 1,\n//     step: 0.1,\n//     min: 0.5,\n//     max: 2.0,\n//     minLabel: \"Fairly even across options\",\n//     maxLabel: \"\",\n//     title: `Among ${mmLabels.maj} voters, support for ${mmLabels.maj} candidates is...`,\n//     info: `This value provides information to the model on how even or polarized support\n//     is among ${mmLabels.maj} voters for ${mmLabels.maj} candidates. If support is even,\n//     there are no stand out candidates and all are liked evenly. If support is polarized,\n//     there is a front-runner ${mmLabels.maj} candidate among ${mmLabels.maj} voters.`,\n//   },\n//   {\n//     id: \"majorityMinorityAffinity\",\n//     name: \"majorityMinorityAffinity\",\n//     type: \"slider\",\n//     initialValue: 1,\n//     step: 0.1,\n//     min: 0.5,\n//     max: 2.0,\n//     minLabel: \"Fairly even across options\",\n//     maxLabel: \"\",\n//     title: `Among ${mmLabels.maj} voters, support for ${mmLabels.min} candidates is...`,\n//     info: `This value provides information to the model on how even or polarized support\n//     is among ${mmLabels.maj} voters for ${mmLabels.min} candidates. If support is even,\n//     there are no stand out candidates and all are liked evenly. If support is polarized,\n//     there is a front-runner ${mmLabels.min} among ${mmLabels.maj} candidates.`,\n//   },\n//   {\n//     id: \"minorityMinorityAffinity\",\n//     name: \"minorityMinorityAffinity\",\n//     type: \"slider\",\n//     initialValue: 1,\n//     step: 0.1,\n//     min: 0.5,\n//     max: 2.0,\n//     minLabel: \"Fairly even across options\",\n//     maxLabel: \"\",\n//     title: `Among ${mmLabels.min} voters, support for ${mmLabels.min} candidates is...`,\n//     info: `This value provides information to the model on how even or polarized support\n//      is among ${mmLabels.min} voters for ${mmLabels.min} candidates. If support is even,\n//      there are no stand out candidates and all are liked evenly. If support is polarized,\n//      there is a front-runner ${mmLabels.min} among ${mmLabels.min} voters.`,\n//   },\n//   {\n//     id: \"minorityMajorityAffinity\",\n//     name: \"minorityMajorityAffinity\",\n//     type: \"slider\",\n//     initialValue: 1,\n//     step: 0.1,\n//     min: 0.5,\n//     max: 2.0,\n//     minLabel: \"Fairly even across options\",\n//     maxLabel: \"\",\n//     title: `Among ${mmLabels.min} voters, support for ${mmLabels.maj} candidates is...`,\n//     info: `This value provides information to the model on how even or polarized support\n//      is among ${mmLabels.min} voters for ${mmLabels.maj} candidates. If support is even,\n//      there are no stand out candidates and all are liked evenly. If support is polarized,\n//      there is a front-runner ${mmLabels.maj} among Majority voters.`,\n//   },\n// ];\n\nfunction SimulationPage() {\n  const paramKeys = [].concat(\n    electionParams.map((p) => ({ key: p.name, value: p.initialValue }))\n    // modelParams.map((p) => ({ key: p.name, value: p.initialValue }))\n  );\n  // Iterate over all params to set our initial values appropriately\n  const initialState = {};\n  paramKeys.forEach((p) => {\n    initialState[p.key] = p.value;\n  });\n  const [formData, setFormData] = useState(initialState);\n  const [simulationResults, setSimulationResults] = useState({});\n\n  return (\n    <Container fluid>\n      <Row style={{ height: \"max\" }}>\n        <Col className=\"pt-2 d-flex flex-column\">\n          <ElectionParameters\n            formData={formData}\n            setFormData={setFormData}\n            formParams={electionParams}\n          />\n        </Col>\n        <Col className=\"pt-2 d-flex flex-column\">\n          {/* <ModelParameters\n            formData={formData}\n            setFormData={setFormData}\n            formParams={modelParams}\n          /> */}\n        </Col>\n        <Col xl={12} className=\"pt-2 d-flex flex-column\">\n          <SimulationResults\n            simulationResults={simulationResults}\n            queryParams={{ ...formData }}\n            setSimulationResults={setSimulationResults}\n          />\n        </Col>\n      </Row>\n    </Container>\n  );\n}\n\nexport default SimulationPage;\n","import React from \"react\";\n\nfunction AboutPage() {\n  return (\n    <>\n      <h1>About Page</h1>\n      <p>this is where the about page would go, but is a placeholder for now</p>\n    </>\n  );\n}\n\nexport default AboutPage;\n","import SimulationPage from \"./SimulationPage\";\nimport AboutPage from \"./AboutPage\";\n\n// Config file serving as a single point of truth for all application routes\nconst routes = [\n  {\n    path: \"/about\",\n    display: \"About\",\n    component: AboutPage,\n  },\n  {\n    path: \"/\",\n    display: \"Home\",\n    component: SimulationPage,\n  },\n];\n\nexport { routes };\n","import React from \"react\";\nimport { BrowserRouter as Router, Switch, Route } from \"react-router-dom\";\nimport AppHeader from \"./AppHeader\";\nimport { routes } from \"./routes\";\nimport \"./App.css\";\n\nfunction App() {\n  return (\n    <Router>\n      <AppHeader routes={routes} />\n      <Switch>\n        {routes.map((route, i) => (\n          <Route path={route.path} key={i}>\n            <route.component />\n          </Route>\n        ))}\n      </Switch>\n    </Router>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === \"localhost\" ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === \"[::1]\" ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === \"production\" && \"serviceWorker\" in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener(\"load\", () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            \"This web app is being served cache-first by a service \" +\n              \"worker. To learn more, visit https://bit.ly/CRA-PWA\"\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === \"installed\") {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                \"New content is available and will be used when all \" +\n                  \"tabs for this page are closed. See https://bit.ly/CRA-PWA.\"\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log(\"Content is cached for offline use.\");\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error(\"Error during service worker registration:\", error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { \"Service-Worker\": \"script\" },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get(\"content-type\");\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf(\"javascript\") === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        \"No internet connection found. App is running in offline mode.\"\n      );\n    });\n}\n\nexport function unregister() {\n  if (\"serviceWorker\" in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"fontsource-open-sans\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport \"./index.css\";\n\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}